import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants, LinkPreviewOptions
from telegram.ext import ApplicationBuilder, ChatMemberHandler, CallbackContext, CallbackQueryHandler, filters, MessageHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime, timedelta
import pytz
import locale
from DB import Database
from Message import Message
from enum import Enum, auto

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏
"""logging init"""
log_filename = "logs\\" + datetime.now().strftime("%d-%m-%Y") + ".log"
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler(log_filename),logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
async def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Telegram:", exc_info=context.error)

class MessageState(Enum):
    DEFAULT = auto()
    TEXT = auto()
    LINKS = auto()
    TIME = auto()
class MtgBot:
    """Init and common methods"""
    def escape_markdown_v2(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è Telegram.
        –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: _ * [ ] ( ) ~ ` > # + - = | { } . !
        """
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

    def format_time(self, str_to_f: str):
        hours, minutes = map(int, str_to_f.split(':'))
        return f"{hours:02d}:{minutes:02d}"
    
    def __init__(self):
        self.db = Database()
        self.scheduler = None
        self.message_state = MessageState.DEFAULT

    async def start_command(self, update: Update, context: CallbackContext):
        context.user_data['started'] = True
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

    async def init_scheduler(self, application):
        self.scheduler=AsyncIOScheduler()
        self.bot=application.bot
        self.scheduler.start()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ –±–∞–∑—ã
        for message in self.db.init_load_all():
            if message.trigger:
                self.scheduler.add_job(
                    self.send_scheduled_message,
                    trigger=message.trigger,
                    args=[message.chat_id]
                )

    async def reschedule(self, day_of_week: str, hour: int, minute: int = 0, db_id: int = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º GMT+3"""
        self.scheduler.remove_all_jobs()
            
        moscow_tz = pytz.timezone("Europe/Moscow")
            
        self.scheduler.add_job(
            self.send_scheduled_message,
            trigger=CronTrigger(
                day_of_week=day_of_week,
                hour=hour,
                minute=minute,
                timezone=moscow_tz,
            ),
            args=[db_id]
        )
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {day_of_week} –≤ {hour}:{minute:02d} (GMT+3)")



    async def send_scheduled_message(self, db_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        message = self.db.load_message(db_id)
        if not message:
            logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {db_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        try:
            msg = await self.bot.send_message(
                text=message.generate_message_text(),
                chat_id=message.chat_id,
                reply_markup=self.get_keyboard(message),
                parse_mode=constants.ParseMode.MARKDOWN_V2,
            )
            message.pin_id = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            self.db.save_message(message)

            await self.bot.pin_chat_message(
                chat_id=message.chat_id,
                message_id=message.pin_id,
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def get_keyboard(self, message):
        keyboard = [
            [
                InlineKeyboardButton(f"{len(message.participants)} üëç", callback_data=f'participate_{message.db_id}'),
                InlineKeyboardButton(f"{len(message.maybe_participants)} ‚ùì", callback_data=f'participatemaybe_{message.db_id}'),
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    """handlers of lists"""
    async def update_lists(self, update: Update, context: CallbackContext):
        query = update.callback_query
        action, db_id = query.data.split('_')
        db_id = int(db_id)
        
        message = self.db.load_message(db_id)
        if not message:
            await query.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
            return
        
        if action == 'participate':
            if any(u['id'] == query.from_user.id for u in message.participants):
                message.participants = [u for u in message.participants if u['id'] != query.from_user.id]
            else:
                message.add_participant(query.from_user)
        elif action == 'participatemaybe':
            if any(u['id'] == query.from_user.id for u in message.maybe_participants):
                message.maybe_participants = [u for u in message.maybe_participants if u['id'] != query.from_user.id]
            else:
                message.add_maybe_participant(query.from_user)
        
        self.db.save_message(message)
        await self.update_message(context, message)

    

    async def update_message(self, context: CallbackContext, message: Message):
        try:
            await context.bot.edit_message_text(
                chat_id=message.chat_id,
                message_id=message.pin_id,
                text=message.generate_message_text(),
                reply_markup=self.get_keyboard(message),
                parse_mode=constants.ParseMode.MARKDOWN_V2,
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    """Test section | Admin panel"""

    async def send_admin_panel(self, update: Update, context: CallbackContext, chat_id: int = None):
        if not self.db.get_admin_chat(chat_id):
            logger.info(f"[ADMIN_PANEL] user {chat_id} attempt to call admin_panel, but was not detected in database!")
            await context.bot.send_message(text="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –≤—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —á–∞—Ç –ª–∏–±–æ –±—ã—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–æ–º!",chat_id=chat_id)
            return
        if not context.user_data.get( 'started' ):
            logger.info(f"[ADMIN_PANEL] user {chat_id} can't send message before start")
            return
        # TODO 
        # Emoji!!!!
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="a_create"), InlineKeyboardButton("–°–ø–∏—Å–æ–∫", callback_data="a_messages")],
            # [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="a_options")]
        ])
        try:
            if context.chat_data['panel_state']:
                replayer = update.callback_query.message or update.message
                await replayer.edit_text(
                    text=f"*–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n_"
                         f"–°–ø–∏—Å–æ–∫ \\~\\> –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                         f"–î–æ–±–∞–≤–∏—Ç—å \\~\\> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è_\n\n"
                        ,reply_markup=keyboard,
                        parse_mode=constants.ParseMode.MARKDOWN_V2)
                return
        except KeyError:
            logger.warning("[ADMIN_PANEL] Cannot edit message. Sending new one. Are you from \"a_return\" callback?")
        except Exception as e:
            logger.error(f"[ADMIN_PANEL] Cannot edit: {e}")
        
        await context.bot.send_message(
                        chat_id=chat_id,
                        parse_mode=constants.ParseMode.MARKDOWN_V2,
                        text=f"*–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n_"
                            # f"_–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \\~\\> –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç–∞\n"
                             f"–°–ø–∏—Å–æ–∫ \\~\\> –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                             f"–î–æ–±–∞–≤–∏—Ç—å \\~\\> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è_\n\n",
                        reply_markup=keyboard
                    )

    async def admin_panel(self, update: Update, context: CallbackContext):
        self.message_state = MessageState.DEFAULT

        context.chat_data['admin_id']=update.effective_user.id
        _, command = update.callback_query.data.split('_')
        try:
            if command == "messages":
                await self.message_list(update, context)
            if command == "create":
                await self.create_message(update, context)
            if command == "return":
                context.chat_data['panel_state'] = True
                await self.send_admin_panel(update, context, context.chat_data['admin_id'])
            else:
                logger.warning(f"[ADMIN_PANEL] Cannot parse command \"{command}\" : undefined command")
                return
            logger.info(f"[ADMIN_PANEL] Parsing {command}")
        except Exception as e:
            logger.error(f"[ADMIN_PANEL] Cannot parse command: {e}")

    async def message_list(self, update: Update, context: CallbackContext):
        context.chat_data['db_id'] = None
        context.chat_data['week']={'mon': '–ü–Ω','tue': '–í—Ç','wed': '–°—Ä','thu': '–ß—Ç','fri': '–ü—Ç','sat': '–°–±','sun': '–í—Å'}
        messages = self.db.load_messages(context.chat_data['admin_id'])
        if len(messages) <= 0:
            await update.callback_query.edit_message_text(
                text="–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ú–µ–Ω—é", callback_data="a_return")]])
            )
            return
        keyboard = [[InlineKeyboardButton(f"{i+1}", callback_data=f"s_{message.db_id}")] for i, message in enumerate(messages)]
        keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data="a_return")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text_list = [f"{i+1}\\. {message.text} {self.format_time(message.time)} {context.chat_data['week'].get(message.day_of_week)}" for i, message in enumerate(messages)]
        text = '\n'.join(text_list)
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=constants.ParseMode.MARKDOWN_V2)

    async def message_render(self, update: Update, context: CallbackContext):
        context.chat_data['week']={'mon': '–ü–Ω','tue': '–í—Ç','wed': '–°—Ä','thu': '–ß—Ç','fri': '–ü—Ç','sat': '–°–±','sun': '–í—Å'}
        try:
            _, message_id = update.callback_query.data.split('_')
        except:
            logger.info(f"[MESSAGE_RENDER] Returned from [ADMIN_RESCHEDULE]. The db_id is {context.chat_data['db_id']}")
        try:
            if context.chat_data['db_id']:
                db_id = context.chat_data['db_id']
                if self.db.load_message(db_id):
                   message_id = db_id
        except:
            logger.warning(f"[MESSAGE_RENDER] Cannot parse context.chat_data['db_id']. Instead using \"{message_id}\"")

        context.chat_data['db_id'] = message_id
        message = self.db.load_message(message_id)

        keyboard=[
            [InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data=f"m_text"), InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"m_delete")],
            [InlineKeyboardButton("–°—Å—ã–ª–∫–∏", callback_data=f"m_links"),InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"m_reschedule")],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫", callback_data="a_messages"),InlineKeyboardButton("–ú–µ–Ω—é", callback_data="a_return")]
            ]
        if self.message_state == MessageState.DEFAULT:
            await update.callback_query.edit_message_text(
                text=message.generate_message_text(),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=constants.ParseMode.MARKDOWN_V2)
        else:
            await context.bot.edit_message_text(
                chat_id=update.message.chat_id,
                message_id=context.chat_data['edit_id'].id,
                text=message.generate_message_text(),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=constants.ParseMode.MARKDOWN_V2)

    async def message_menu(self, update: Update, context: CallbackContext):
        self.message_state = MessageState.DEFAULT
        _, command = update.callback_query.data.split('_')
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ú–µ–Ω—é", callback_data='a_return')]])
        try:
            # TODO
            if command == "delete":
                await self.delete_message(update, context)
            if command == "text":
                self.message_state = MessageState.TEXT
                context.chat_data['edit_id'] = await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ", reply_markup=keyboard)
            if command == "links":
                self.message_state = MessageState.LINKS
                context.chat_data['edit_id'] = await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏: ", reply_markup=keyboard)
            if command == "reschedule":
                self.message_state = MessageState.TIME
                await self.admin_reschedule(update, context)

            logger.info(f"[MESSAGE_MENU] Parsing {command}")
        except Exception as e:
            logger.error(f"[MESSAGE_MENU] Cannot parse command: {e}")

    async def create_message(self, update: Update, context: CallbackContext):
            """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞–¥–º–∏–Ω–æ–º"""
            messager = update.message or update.callback_query
            if update.effective_chat.type != "private":
                await messager.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
                return
                
            admin_id = update.effective_user.id
            if not self.db.get_admin_chat(admin_id):
                await messager.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
                return

            chat_id = self.db.get_admin_chat(admin_id)

            message = Message()
            message.chat_id = chat_id
            message = self.db.save_message(message)
            context.chat_data['db_id'] = message.db_id
            self.message_state = MessageState.TIME
            await self.admin_reschedule(update, context)

    
    async def delete_message(self, update: Update, context: CallbackContext):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
        replayer = update.message or update.callback_query.message
        db_id = context.chat_data['db_id']
        if not self.db.get_admin_chat(update.effective_user.id):
            await replayer.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
            return
        message = self.db.load_message(db_id)
        if not message:
            await replayer.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        self.db.delete_message(db_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if message.pin_id:
                await context.bot.unpin_chat_message(chat_id=message.chat_id, message_id=message.pin_id)
        except Exception as e:
            logger.error(f"[DELETER] Cannot unpin message: {e}")
        await self.message_list(update, context)

    async def admin_reschedule(self, update: Update, context: CallbackContext):
        replayer = update.message or update.callback_query.message
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reschedule"""
        if update.effective_chat.type != "private":
            await replayer.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            return
        message_id = context.chat_data['db_id']
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≥—Ä—É–ø–ø—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.chat_data['message'] = self.db.load_message(message_id)
        
        days = [
            ["–ü–Ω", "mon"],
            ["–í—Ç", "tue"],
            ["–°—Ä", "wed"],
            ["–ß—Ç", "thu"],
            ["–ü—Ç", "fri"],
            ["–°–±", "sat"],
            ["–í—Å", "sun"],
            ["–°–µ–≥–æ–¥–Ω—è", "to"]]
        keyboard = [[InlineKeyboardButton(day[0], callback_data=f"day_{day[1]}")] for day in days]
        keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data="a_return")])
        context.chat_data['edit_id'] = await replayer.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def day_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
    
        selected_day = query.data.split('_')[1]
        week = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
    
        if selected_day == "to":
            selected_day = week[datetime.now(pytz.timezone('Europe/Moscow')).weekday()]
    
        context.chat_data['message'].day_of_week = selected_day

        selected_day_index = week.index(selected_day)
        notice_day_index = (selected_day_index - 2) % 7  # %7 –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        context.chat_data['message'].day_of_notice = week[notice_day_index]
    
        h, m = context.chat_data['message'].time.split(":")
        h, m = int(h), int(m)
        context.chat_data['message'].time = f"{h:02d}:{m:02d}"
    
        await query.edit_message_text(
            text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏\\!\n_–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú_",
            parse_mode=constants.ParseMode.MARKDOWN_V2,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–û—Å—Ç–∞–≤–∏—Ç—å –Ω—ã–Ω–µ—à–Ω–µ–µ ({context.chat_data['message'].time})", callback_data="keep_time")]
            ])
        )

    async def admin_input(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            message_id = context.chat_data['db_id']
        except Exception as e:
            logger.error(f"[ADMIN_INPUT] Cannot retrive message_id: {e}")
            return
        except KeyError as e:
            logger.error(f"[ADMIN_INPUT] Cannot retrieve message_id: {e}")
            return
        
        if self.message_state == MessageState.TIME:
            try:
                time_str = update.message.text
                hours, minutes = map(int, time_str.split(':'))
                if not (0 <= hours < 24 and 0 <= minutes < 60):
                    raise ValueError
            except:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
            context.chat_data['message'].time = f"{hours:02d}:{minutes:02d}"
            await self.finish_reschedule(update=update, context=context)

        if self.message_state == MessageState.LINKS:
            message = self.db.load_message(message_id)
            message.links = update.message.text_markdown_v2
            await context.bot.delete_message(chat_id=update.effective_chat.id,message_id=update.message.id)
            self.db.save_message(message)
            await self.message_render(update, context)
        
        if self.message_state == MessageState.TEXT:
            message = self.db.load_message(message_id)
            message.text = update.message.text
            await context.bot.delete_message(chat_id=update.effective_chat.id,message_id=update.message.id)
            self.db.save_message(message)
            await self.message_render(update, context)
        
        if self.message_state == MessageState.DEFAULT:
            await self.send_admin_panel(update, context, update.effective_user.id)

    async def keep_time_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        await update.callback_query.answer()
        await self.finish_reschedule(update=update, context=context)

    async def finish_reschedule(self, update: Update, context: CallbackContext):
        self.message_state = MessageState.DEFAULT
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        message_obj = update.callback_query.message if update.callback_query else update.message
        await context.bot.delete_message(
                chat_id=message_obj.chat_id,
                message_id=message_obj.message_id
        )
        # –ü–æ–ª—É—á–∞–µ–º chat_id –≥—Ä—É–ø–ø—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞
        admin_chat_id = message_obj.chat_id
        group_chat_id = context.chat_data['message'].chat_id
        
        if not group_chat_id:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text="–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            return
        
        current_message = context.chat_data['message']
        if not current_message:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text="–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã"
            )
            return

        hour, minute = map(int, current_message.time.split(':'))
        current_message.set_trigger(current_message.day_of_notice, f"{hour:02d}:{minute:02d}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        self.db.save_message(current_message)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await self.reschedule(current_message.day_of_notice, hour, minute, current_message.db_id)
        await context.bot.send_message(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",chat_id=admin_chat_id)
        await self.send_admin_panel(update, context, update.effective_user.id)

    async def added_to_chat(self, update: Update, context: CallbackContext):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
            for user in update.message.new_chat_members:
                if user.id == context.bot.id:
                    chat_id = update.effective_chat.id
                    added_by = update.message.from_user.id

                    if not self.db.add_chat_admin(chat_id, added_by):
                        logger.error("Cannot add admin to database!")
                    else:
                        logger.info("Successed adding admin to database")
                    
                    # TODO:
                    # Menu with keyboards for bot.admin_panel
                    await context.bot.send_message(
                        chat_id=added_by,
                        parse_mode=constants.ParseMode.MARKDOWN_V2,
                        text=f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ —á–∞—Ç\\!\n–ß—Ç–æ–±—ã —è –º–æ–≥ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º\\."
                    )
                    await self.send_admin_panel(update, context, added_by)
    """–£–ª–µ—Ç–∞–µ–º –±–ª—è"""
    async def handle_migration(self, update: Update, context: CallbackContext):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç chat_id –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É"""
        old_chat_id = update.message.migrate_from_chat_id  # –°—Ç–∞—Ä—ã–π ID (—É–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        new_chat_id = update.message.chat.id               # –ù–æ–≤—ã–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ -100)
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∞. –°—Ç–∞—Ä—ã–π ID: {old_chat_id}, –Ω–æ–≤—ã–π ID: {new_chat_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –ë–î
        if self.db.update_chat_id(old_chat_id, new_chat_id):
            logger.info("Chat_id —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_id –≤ –ë–î")

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –Ω–æ–≤—ã–º chat_id
        await self.reschedule_all_events(new_chat_id)
    async def reschedule_all_events(self, new_chat_id: int):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ chat_id"""
        messages = self.db.load_messages()
        for msg in messages:
            if msg.trigger:
                self.scheduler.add_job(
                    self.send_scheduled_message,
                    trigger=msg.trigger,
                    args=[msg.db_id]
                )
        logger.info(f"–í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è chat_id: {new_chat_id}")
    """Z T<FYENsQ"""
    async def handle_chat_member_update(self, update: Update, context: CallbackContext):
        chat_member = update.my_chat_member
        new_status = chat_member.new_chat_member.status

        # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –æ–Ω –≤—ã—à–µ–ª —Å–∞–º
        if new_status in ('left', 'kicked'):
            chat_id = update.effective_chat.id
            self.db.remove_chats_data(chat_id)
            logger.info(f"–ë–æ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")
"""main loop"""
if __name__ == '__main__':
    bot = MtgBot()

    token = os.getenv('MTG_BOT')
    if token is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è 'MTG_BOT'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ PythonAnywhere.")
        exit(1)

    application.add_handler(CommandHandler("start", bot.start_command))
    application = ApplicationBuilder().token(os.getenv('MTG_BOT')).build()
    application.post_init = bot.init_scheduler
    application.add_error_handler(error_handler)

    application.add_handlers([
        CallbackQueryHandler(bot.admin_panel, pattern='^a_'),
        CallbackQueryHandler(bot.message_render, pattern='^s_'),
        CallbackQueryHandler(bot.message_menu, pattern='^m_'),
        # depricated reschedule_admin calls
        CallbackQueryHandler(bot.day_callback, pattern='^day_'),
        CallbackQueryHandler(bot.keep_time_callback, pattern='^keep_time'),
        MessageHandler(filters.TEXT & ~filters.COMMAND, bot.admin_input),
        MessageHandler(filters.StatusUpdate.MIGRATE, bot.handle_migration)
    ])
    
    application.add_handlers([
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, bot.added_to_chat),
        ChatMemberHandler(bot.handle_chat_member_update),
        CallbackQueryHandler(bot.update_lists, pattern="^participate")
    ])

    application.run_polling()